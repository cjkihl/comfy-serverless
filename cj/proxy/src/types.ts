export type ComfyNode = {
	inputs: Record<string, [string, number] | string | number>;
	class_type: string;
	_meta?: {
		title: string;
	};
};

export type ComfyPrompt = Record<string, ComfyNode>;

export type SubmitPromptBody = {
	prompt: ComfyPrompt;
	prompt_id?: string;
	extra_data?: Record<string, unknown>;
	partial_execution_targets?: string[];
	webhook_url?: string;
	webhook_secret?: string;
};

export type PromptAccepted = {
	prompt_id: string;
	number: number;
};

export type ProxyWsInbound =
	| { type: "submit_prompt"; data: SubmitPromptBody }
	| { type: "ping"; data?: unknown };

export type ProxyWsOutbound =
	| { type: "prompt_accepted"; data: PromptAccepted }
	| { type: "error"; data: ProxyError }
	| { type: string; data: unknown };

export type ProxyError = {
	message: string;
	code?: ErrorCode;
	userId?: string;
	promptId?: string;
	timestamp?: number;
	retryable?: boolean;
	context?: Record<string, unknown>;
};

export enum ErrorCode {
	INVALID_WEBHOOK_URL = "INVALID_WEBHOOK_URL",
	MAX_CONNECTIONS_EXCEEDED = "MAX_CONNECTIONS_EXCEEDED",
	QUEUE_FULL = "QUEUE_FULL",
	COMFY_UNAVAILABLE = "COMFY_UNAVAILABLE",
	SESSION_NOT_READY = "SESSION_NOT_READY",
	INVALID_PROMPT = "INVALID_PROMPT",
	EXECUTION_ERROR = "EXECUTION_ERROR",
	CONNECTION_ERROR = "CONNECTION_ERROR",
	TIMEOUT = "TIMEOUT",
	UNKNOWN = "UNKNOWN",
}

export type ComfyWsMessage = { type: string; data: unknown };

export type ConnectionState = "connecting" | "connected" | "disconnected";

// Extended WebSocket type for Bun's ServerWebSocket that includes custom properties
import type { ServerWebSocket } from "bun";

export interface ExtendedServerWebSocket<T> extends ServerWebSocket<T> {
	userId?: string;
}

export type Session = {
	userId: string;
	clientId: string; // generated by proxy for Comfy
	sid?: string; // Comfy-assigned session id (from status)
	currentPromptId?: string;
	comfyWs?: WebSocket;
	clientWs?: ExtendedServerWebSocket<unknown>;
	lastActiveAt: number;
	connectionState: ConnectionState;
	webhooks?: Record<string, { url: string; secret?: string }>; // prompt_id -> webhook config
};

export type MetricsResponse = {
	active_sessions: number;
	active_connections: number;
	uptime_seconds: number;
	memory_usage: NodeJS.MemoryUsage;
	circuit_breaker_state: string;
	queued_prompts: Record<string, number>;
	detailed_sessions?: Array<{
		userId: string;
		clientId: string;
		connectionState: ConnectionState;
		lastActiveAt: number;
	}>;
};

export type QueuedPrompt = {
	prompt: ComfyPrompt;
	prompt_id?: string;
	extra_data?: Record<string, unknown>;
	partial_execution_targets?: string[];
	timestamp: number;
	userId: string;
};
